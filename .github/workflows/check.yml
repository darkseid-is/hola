name: "Check"

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  workflow_call:
  pull_request:
    #push:
    #  branches:
    #    - main

jobs:
  cargo-fmt:
    name: Cargo fmt
    runs-on: ubuntu-latest

    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt

      - name: Caching
        uses: Swatinem/rust-cache@v2
        with:
          # Determines which crates are cached.
          # If `true` all crates will be cached, otherwise only dependent crates will be cached.
          # Useful if additional crates are used for CI tooling.
          # default: "false"
          cache-all-crates: true

          # Determiners whether the cache should be saved.
          # If `false`, the cache is only restored.
          # Useful for jobs where the matrix is additive e.g. additional Cargo features,
          # or when only runs from `master` should be saved to the cache.
          # default: "true"
          # save-if: ""
          # To only cache runs from `master`:
          save-if: ${{ github.ref == 'refs/heads/master' }}

          # Specifies what to use as the backend providing cache
          # Can be set to either "github" or "buildjet"
          # default: "github"
          cache-provider: "github"

      - name: Rustfmt Check
        run: cargo +nightly fmt --all --check

  cargo-clippy:
    name: Cargo clippy
    runs-on: ubuntu-latest

    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy

      - name: Clippy Check
        run: cargo clippy --workspace --all-targets --all-features -- -Dwarnings 

  cargo-test:
    name: Cargo test
    runs-on: ubuntu-latest

    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Cargo test
        run: cargo test --workspace --all-targets --all-features
